#          _                 _ _   _
#     __ _| | __ _  ___ _ __(_) |_| |_ _   _
#   / _` | |/ _` |/ __| '__| | __| __| | | |
#  | (_| | | (_| | (__| |  | | |_| |_| |_| |
#  \__,_|_|\__,_|\___|_|  |_|\__|\__|\__, |
#                                    |___/

# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
# env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  # TERM: xterm-256color-italic

window:
  opacity: 1.00
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels. If both are zero this
  # setting is ignored.
  # dimensions:
  #   columns: 100
  #   lines: 85

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is not scaled by
  # DPI and the specified value is always added at both opposing sides.
  padding:
    x: 10
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Window decorations
  #
  # Available values:
  # - full: borders and title bar
  # - none: neither borders nor title bar
  # - transparent: title bar, transparent background and title bar buttons
  # - buttonless: title bar, transparent background, but no title bar buttons
  #  decorations: buttonless
  decorations: 'None'

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed

scrolling:
  # maximum number of lines in the scrollback buffer. Specifying '0' will
  # disable scrolling.
  history: 100

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  # Style can be specified to pick a specific face.
  normal:
    # family: Iosevka Nerd Font
    family: FiraCode NF
    style: Regular
    # family: "Fira Code"
    # family: "Source Code Pro"
    # style: Retina

  # The bold font face
  bold:
    #family: Iosevka Nerd Font
    family: FiraCode NF
    style: Bold
    # family: "Fira Code"
    # family: "Source Code Pro"

  # The italic font face
  italic:
    #family: Iosevka Nerd Font
    family: FiraCode NF
    style: Italic
    # style: "Light Oblique"
    # family: "Fira Code"
    # family: "Source Code Pro"
    # style: "Medium Italic"

  # Point size of the font
  size: 11

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: true
  #################################
# Colors
# Colors (One Dark)
#colors:
## Default colors
#primary:
#background: '0x1e2127'
#foreground: '#ededed'
#
## Normal colors
#normal:
#black:   '0x1e2127'
#red:     '0xe06c75'
#green:   '0x98c379'
#yellow:  '0xd19a66'
#blue:    '0x61afef'
#magenta: '0xc678dd'
#cyan:    '0x56b6c2'
#white:   '#ededed'
##    white:   '0xabb2bf'
#
## Bright colors
#bright:
#black:   '0x5c6370'
#red:     '0xe06c75'
#green:   '0x98c379'
#yellow:  '0xd19a66'
#blue:    '0x61afef'
#magenta: '0xc678dd'
#cyan:    '0x56b6c2'
#white:   '0xffffff'

import:
  # uncomment the flavour you want below:
  - ~/.config/alacritty/catppuccin/catppuccin-mocha.yml
#  - ~/.config/alacritty/catppuccin/catppuccin-macchiato.yml
#  - ~/.config/alacritty/catppuccin/catppuccin-frappe.yml
#  - ~/.config/alacritty/catppuccin/catppuccin-latte.yml

  # # Tomorrow Night (https://github.com/aarowill/base16-alacritty/blob/master/colors/base16-tomorrow-night.yml)
  # # Default colors
  # primary:
  #   background: '0x1d1f21'
  #   foreground: '0xc5c8c6'
  # # Colors the cursor will use if `custom_cursor_colors` is true
  # cursor:
  #   text: '0x1d1f21'
  #   cursor: '0xc5c8c6'
  # # Normal colors
  # normal:
  #   black:   '0x1d1f21'
  #   red:     '0xcc6666'
  #   green:   '0xb5bd68'
  #   yellow:  '0xf0c674'
  #   blue:    '0x81a2be'
  #   magenta: '0xb294bb'
  #   cyan:    '0x8abeb7'
  #   white:   '0xc5c8c6'
  # # Bright colors
  # bright:
  #   black:   '0x969896'
  #   red:     '0xde935f'
  #   green:   '0x282a2e'
  #   yellow:  '0x373b41'
  #   blue:    '0xb4b7b4'
  #   magenta: '0xe0e0e0'
  #   cyan:    '0xa3685a'
  #   white:   '0xffffff'

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- { index: 16, color: '0xff00ff' }`
  #
  # indexed_colors: []

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
  animation: EaseOutExpo
  color: '0xffffff'
  duration: 0

# Background opacity
# background_opacity: 0.9

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
# key_bindings:
#   - { key: v,        mods: command,       action: paste                        }
#   - { key: c,        mods: command,       action: copy                         }
#   - { key: q,        mods: command,       action: quit                         }
#   - { key: n,        mods: command,       action: spawnnewinstance             }
#   - { key: return,   mods: command,       action: togglefullscreen             }

#   - { key: home,                          chars: "\x1boh",   mode: appcursor   }
#   - { key: home,                          chars: "\x1b[h",   mode: ~appcursor  }
#   - { key: end,                           chars: "\x1bof",   mode: appcursor   }
#   - { key: end,                           chars: "\x1b[f",   mode: ~appcursor  }
#   - { key: equals,   mods: command,       action: increasefontsize             }
#   - { key: minus,    mods: command,       action: decreasefontsize             }
#   - { key: minus,    mods: command|shift, action: resetfontsize                }
#   - { key: pageup,   mods: shift,         chars: "\x1b[5;2~"                   }
#   - { key: pageup,   mods: control,       chars: "\x1b[5;5~"                   }
#   - { key: pageup,                        chars: "\x1b[5~"                     }
#   - { key: pagedown, mods: shift,         chars: "\x1b[6;2~"                   }
#   - { key: pagedown, mods: control,       chars: "\x1b[6;5~"                   }
#   - { key: pagedown,                      chars: "\x1b[6~"                     }
#   - { key: left,     mods: shift,         chars: "\x1b[1;2d"                   }
#   - { key: left,     mods: control,       chars: "\x1b[1;5d"                   }
#   - { key: left,     mods: alt,           chars: "\x1b[1;3d"                   }
#   - { key: left,                          chars: "\x1b[d",   mode: ~appcursor  }
#   - { key: left,                          chars: "\x1bod",   mode: appcursor   }
#   - { key: right,    mods: shift,         chars: "\x1b[1;2c"                   }
#   - { key: right,    mods: control,       chars: "\x1b[1;5c"                   }
#   - { key: right,    mods: alt,           chars: "\x1b[1;3c"                   }
#   - { key: right,                         chars: "\x1b[c",   mode: ~appcursor  }
#   - { key: right,                         chars: "\x1boc",   mode: appcursor   }
#   - { key: up,       mods: shift,         chars: "\x1b[1;2a"                   }
#   - { key: up,       mods: control,       chars: "\x1b[1;5a"                   }
#   - { key: up,       mods: alt,           chars: "\x1b[1;3a"                   }
#   - { key: up,                            chars: "\x1b[a",   mode: ~appcursor  }
#   - { key: up,                            chars: "\x1boa",   mode: appcursor   }
#   - { key: down,     mods: shift,         chars: "\x1b[1;2b"                   }
#   - { key: down,     mods: control,       chars: "\x1b[1;5b"                   }
#   - { key: down,     mods: alt,           chars: "\x1b[1;3b"                   }
#   - { key: down,                          chars: "\x1b[b",   mode: ~appcursor  }
#   - { key: down,                          chars: "\x1bob",   mode: appcursor   }
#   - { key: tab,      mods: shift,         chars: "\x1b[z"                      }
#   - { key: f1,                            chars: "\x1bop"                      }
#   - { key: f2,                            chars: "\x1boq"                      }
#   - { key: f3,                            chars: "\x1bor"                      }
#   - { key: f4,                            chars: "\x1bos"                      }
#   - { key: f5,                            chars: "\x1b[15~"                    }
#   - { key: f6,                            chars: "\x1b[17~"                    }
#   - { key: f7,                            chars: "\x1b[18~"                    }
#   - { key: f8,                            chars: "\x1b[19~"                    }
#   - { key: f9,                            chars: "\x1b[20~"                    }
#   - { key: f10,                           chars: "\x1b[21~"                    }
#   - { key: f11,                           chars: "\x1b[23~"                    }
#   - { key: f12,                           chars: "\x1b[24~"                    }
#   - { key: back,                          chars: "\x7f"                        }
#   - { key: back,     mods: alt,           chars: "\x1b\x7f"                    }
#   - { key: insert,                        chars: "\x1b[2~"                     }
#   - { key: delete,                        chars: "\x1b[3~"                     }

#     # shortcuts for tmux. the leader key is control-b (0x02)
#   - { key: w,        mods: command,       chars: "\x02&"                       }  # close tab (kill)
#   - { key: t,        mods: command,       chars: "\x02c"                       }  # new tab
#   - { key: rbracket, mods: command|shift, chars: "\x02n"                       }  # select next tab
#   - { key: lbracket, mods: command|shift, chars: "\x02p"                       }  # select previous tab
#   - { key: rbracket, mods: command,       chars: "\x02o"                       }  # select next pane
#   - { key: lbracket, mods: command,       chars: "\x02;"                       }  # select last (previously used) pane
#   - { key: F,        mods: Command,       chars: "\x02/"                       }  # search (upwards) (see tmux.conf)

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  # URL launcher
  # url:
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux) xdg-open
    #   - (Windows) explorer
    # launcher:
    #   program: xdg-open
    #   args: []

    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    # modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# dynamic_title: false

# Live config reload (changes require restart)
live_config_reload: true

debug:
  # Should display the render timer
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - OFF
  #   - ERROR
  #   - WARN
  #   - INFO
  #   - DEBUG
  #   - TRACE
  log_level: OFF

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
